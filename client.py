import asyncio
import json
import logging
import os
import uuid
from contextlib import suppress
from datetime import datetime
from typing import Any, Awaitable, Callable, Dict, List, Optional, Set

import asyncpg
from aiogram import Bot, Dispatcher, F, Router, html, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ContentType, ParseMode
from aiogram.exceptions import TelegramAPIError
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.types import (
    CallbackQuery,
    ChatMemberUpdated,
    InlineKeyboardMarkup,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
    User,
    WebAppInfo,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from dotenv import load_dotenv

import api

# -------------------- ENV / LOGGING --------------------
load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
WEBAPP_URL = os.getenv("WEBAPP_URL")
ADMIN_IDS_STR = os.getenv("ADMIN_IDS", "")
ADMIN_IDS: Set[int] = set()
if ADMIN_IDS_STR:
    try:
        ADMIN_IDS = {int(admin_id.strip()) for admin_id in ADMIN_IDS_STR.split(",") if admin_id.strip()}
        logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã ADMIN_IDS: {ADMIN_IDS}")
    except ValueError:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å ADMIN_IDS.")
else:
    logging.warning("ADMIN_IDS –Ω–µ —É–∫–∞–∑–∞–Ω—ã.")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
)
logger = logging.getLogger(__name__)

# -------------------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã --------------------
ALLOWED_DOC_EXTS = {"pptx", "pdf", "docx"}

MATERIAL_CATEGORIES = {
    "lectures": "–õ–µ–∫—Ü–∏–∏",
    "announcements": "–û–±—ä—è–≤–ª–µ–Ω–∏—è",
    "figures": "–ì—Ä–∞—Ñ–∏–∫–∏/–†–∏—Å—É–Ω–∫–∏",
    "video": "–í–∏–¥–µ–æ",
    "links": "–°—Å—ã–ª–∫–∏",
    "library": "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞",
}

# -------------------- FSM --------------------
class Registration(StatesGroup):
    getting_first_name = State()
    getting_last_name = State()
    choosing_group = State()


class StudentActions(StatesGroup):
    submitting_assignment_file = State()
    changing_group = State()
    asking_question = State()
    changing_name_first = State()
    changing_name_last = State()


# -------------------- Routers --------------------
main_router = Router()
registration_router = Router()
student_router = Router()
teacher_router = Router()
profile_router = Router()
materials_router = Router()

# -------------------- Globals --------------------
db_pool: Optional[asyncpg.Pool] = None
bot_instance: Optional[Bot] = None

LAST_MATERIALS: Dict[int, List[str]] = {}
MAX_LAST_MATERIALS = 5
LAST_MATERIALS_BY_CAT: Dict[int, Dict[str, List[str]]] = {}

# -------------------- DB --------------------
async def get_db_pool() -> asyncpg.Pool:
    global db_pool
    if db_pool is None:
        try:
            db_url = DATABASE_URL
            if db_url and db_url.startswith("postgres://"):
                db_url = db_url.replace("postgres://", "postgresql://", 1)
            db_pool = await asyncpg.create_pool(db_url, max_size=20)
            logger.info("–ü—É–ª –ë–î —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            logger.critical(f"–û—à–∏–±–∫–∞ –ø—É–ª–∞ –ë–î: {e}", exc_info=True)
            raise
    return db_pool


# -------------------- Menu Button --------------------
async def apply_menu_button(bot: Bot, user_id: int, is_admin: bool):
    try:
        if is_admin and WEBAPP_URL:
            mb = types.MenuButtonWebApp(text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", web_app=WebAppInfo(url=WEBAPP_URL))
        else:
            mb = types.MenuButtonDefault()
        await bot.set_chat_menu_button(chat_id=user_id, menu_button=mb)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–µ–Ω—é –¥–ª—è {user_id}: {e}")


# -------------------- Middleware --------------------
class ApprovalMiddleware(BaseMiddleware):
    """
    –ü—Ä–æ–ø—É—Å–∫–∞–µ–º:
      - /start –≤—Å–µ–≥–¥–∞
      - —à–∞–≥–∏ Registration.*
      - callback 'register_to_group_*'
    –ë–ª–æ–∫–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (student + –≤–∞–ª–∏–¥–Ω–∞—è –≥—Ä—É–ø–ø–∞ + –∏–º—è/—Ñ–∞–º–∏–ª–∏—è), –Ω–æ approved=False.
    –í–æ –≤—Å–µ—Ö –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å—á–∏—Ç–∞–µ–º —Ä–æ–ª—å—é 'registering'.
    """

    @staticmethod
    def _needs_registration(u: Optional[dict], tg_first_name: str = "", tg_last_name: str = "") -> bool:
        if not u:
            return True
        role = (u.get("role") or "pending").lower()
        g = u.get("group_id")
        try:
            g_ok = g is not None and int(g) > 0
        except Exception:
            g_ok = bool(g)
        has_names = bool((u.get("first_name") or "").strip() or tg_first_name) and \
                    bool((u.get("last_name") or "").strip() or tg_last_name)
        return (role != "student") or (not g_ok) or (not has_names)

    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Any,
        data: Dict[str, Any],
    ) -> Any:
        user: Optional[User] = data.get("event_from_user")
        bot: Bot = data["bot"]

        if not user:
            return await handler(event, data)

        pool = await get_db_pool()
        data["db_pool"] = pool

        state: Optional[FSMContext] = data.get("state")
        current_state_str = await state.get_state() if state else None

        # –í—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º /start
        if isinstance(event, Message) and isinstance(event.text, str) and event.text.startswith("/start"):
            return await handler(event, data)

        # –í—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥–∏ FSM —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if current_state_str and current_state_str.startswith(Registration.__name__):
            return await handler(event, data)

        # –í—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if isinstance(event, CallbackQuery) and isinstance(event.data, str) and event.data.startswith("register_to_group_"):
            return await handler(event, data)

        # –ê–¥–º–∏–Ω ‚Äî –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if user.id in ADMIN_IDS:
            data["user_role"] = "teacher"
            data["user_db_id"] = None
            data["user_info"] = {
                "telegram_id": user.id,
                "role": "teacher",
                "approved": True,
                "first_name": user.first_name or "Admin",
                "last_name": user.last_name or "",
            }
            with suppress(Exception):
                await apply_menu_button(bot, user.id, True)
            return await handler(event, data)

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        db_user = None
        try:
            async with pool.acquire() as conn:
                db_user = await api.get_user(conn, user.id)
        except Exception as e:
            logger.error(f"DB error in middleware getting user {user.id}: {e}")

        # –ù–æ–≤—ã–π ‚Äî —Å—á–∏—Ç–∞–µ–º 'registering'
        if not db_user:
            data["user_role"] = "registering"
            data["user_db_id"] = None
            data["user_info"] = {"telegram_id": user.id, "role": "pending", "approved": False}
            with suppress(Exception):
                await apply_menu_button(bot, user.id, False)
            return await handler(event, data)

        # –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ù–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî —è–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º —Ä–æ–ª—å—é 'registering' –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if self._needs_registration(db_user, user.first_name or "", user.last_name or ""):
            data["user_db_id"] = db_user.get("user_id")
            data["user_role"] = "registering"  # <‚Äî –∫–ª—é—á–µ–≤–æ–µ
            data["user_info"] = db_user
            with suppress(Exception):
                await apply_menu_button(bot, user.id, False)
            return await handler(event, data)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å—ë –Ω–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ
        if not db_user.get("approved"):
            with suppress(Exception):
                await apply_menu_button(bot, user.id, False)
            # –ë–µ–∑ —Å–ø–∞–º–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –º—è–≥–∫–∏–π –æ—Ç–≤–µ—Ç –∏ –±–ª–æ–∫
            try:
                if isinstance(event, Message):
                    await event.answer("‚è≥ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
                elif isinstance(event, CallbackQuery):
                    await event.answer("‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", show_alert=False)
            except TelegramAPIError as e:
                logger.warning(f"Failed to notify unapproved {user.id}: {e}")
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        data["user_db_id"] = db_user.get("user_id")
        data["user_role"] = db_user.get("role") or "student"
        data["user_info"] = db_user
        with suppress(Exception):
            await apply_menu_button(bot, user.id, False)
        return await handler(event, data)

# -------------------- Keyboards --------------------
def get_student_main_keyboard() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.button(text="üìù –°–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
    builder.button(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å (Q&A)")
    builder.button(text="üìÅ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
    builder.button(text="üìä –ú–æ–∏ –û—Ü–µ–Ω–∫–∏")
    builder.button(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    builder.adjust(2, 2, 1)
    return builder.as_markup(resize_keyboard=True, input_field_placeholder="–î–µ–π—Å—Ç–≤–∏–µ:")


def get_admin_main_keyboard() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.button(text="üìù –°–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
    builder.button(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å (Q&A)")
    builder.button(text="üìÅ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
    builder.button(text="üìä –ú–æ–∏ –û—Ü–µ–Ω–∫–∏")
    builder.button(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    if WEBAPP_URL:
        builder.button(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", web_app=WebAppInfo(url=WEBAPP_URL))
    builder.adjust(2, 2, 1, 1)
    return builder.as_markup(resize_keyboard=True, input_field_placeholder="–ê–¥–º–∏–Ω / –î–µ–π—Å—Ç–≤–∏–µ:")


def get_profile_menu_keyboard() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.button(text="üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")
    builder.button(text="üë§ –°–º–µ–Ω–∏—Ç—å –∏–º—è")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    builder.adjust(2, 1)
    return builder.as_markup(resize_keyboard=True, input_field_placeholder="–ü—Ä–æ—Ñ–∏–ª—å:")


def get_materials_menu_keyboard() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.button(text="üìò –õ–µ–∫—Ü–∏–∏")
    builder.button(text="üì£ –û–±—ä—è–≤–ª–µ–Ω–∏—è")
    builder.button(text="üìä –ì—Ä–∞—Ñ–∏–∫–∏/–†–∏—Å—É–Ω–∫–∏")
    builder.button(text="üé¨ –í–∏–¥–µ–æ")
    builder.button(text="üîó –°—Å—ã–ª–∫–∏")
    builder.button(text="üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    builder.adjust(2, 2, 2, 1)
    return builder.as_markup(resize_keyboard=True, input_field_placeholder="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:")


async def get_groups_keyboard(db_pool: asyncpg.Pool, prefix: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    try:
        async with db_pool.acquire() as conn:
            groups = await api.get_groups(conn)
        if groups:
            for g in groups:
                builder.button(text=g["name"], callback_data=f"{prefix}_to_group_{g['group_id']}")
            builder.adjust(2)
        return builder.as_markup()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø: {e}")
        return builder.as_markup()


# -------------------- Handlers --------------------
@main_router.message(CommandStart())
async def handle_start(message: Message, state: FSMContext, db_pool: asyncpg.Pool):
    """
    –ñ–Å–°–¢–ö–û: –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–±–µ—Ä—ë—Ç –§–ò–û –∏ –≥—Ä—É–ø–ø—É ‚Äî –≤—Å–µ–≥–¥–∞ –≤–µ–¥—ë–º –µ–≥–æ –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    –°–æ–æ–±—â–µ–Ω–∏–µ ¬´–æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è¬ª –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –æ–Ω —É–∂–µ student c –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–æ–π.
    """
    await state.clear()
    user = message.from_user
    user_id = user.id
    first_name_tg = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    last_name_tg = user.last_name or ""
    is_admin = user_id in ADMIN_IDS

    await apply_menu_button(message.bot, user_id, is_admin)

    # —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–¥—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    def needs_registration(u: Optional[dict]) -> bool:
        if not u:
            return True
        role = (u.get("role") or "pending").lower()
        # –∫—Ä–∏–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è group_id —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ
        g = u.get("group_id")
        try:
            g_ok = g is not None and int(g) > 0
        except Exception:
            g_ok = bool(g)
        has_names = bool(u.get("first_name")) and bool(u.get("last_name"))
        # –µ—Å–ª–∏ –Ω–µ student –∏–ª–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ –Ω–µ—Ç –∏–º—ë–Ω ‚Äî –µ—â—ë —Ä–µ–≥–∞
        # –ø—Ä–∏—á—ë–º –¥–∞–∂–µ –µ—Å–ª–∏ approved=False ‚Äî —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∞
        return (role != "student") or (not g_ok) or (not has_names)

    db_user = None
    try:
        async with db_pool.acquire() as conn:
            db_user = await api.get_user(conn, user_id)
    except Exception as e:
        logger.error(f"DB error on /start for {user_id}: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # 1) –ù–æ–≤—ã–π ‚Äî –∏–º—è
    if not db_user:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\nüìù –ù–∞—á–Ω—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–ò–º—è</b>:",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.HTML,
        )
        await state.set_state(Registration.getting_first_name)
        return

    # 2) –ï—Å—Ç—å –≤ –ë–î, –Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã (–∏–º—è/—Ñ–∞–º–∏–ª–∏—é –≤–æ–∑—å–º—ë–º –∏–∑ TG, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if needs_registration(db_user):
        kbd = await get_groups_keyboard(db_pool, "register")
        if not kbd or not getattr(kbd, "inline_keyboard", None):
            await message.answer("‚ùóÔ∏è –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        await state.update_data(
            first_name=db_user.get("first_name") or first_name_tg,
            last_name=db_user.get("last_name") or last_name_tg
        )
        await message.answer("üè´ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=kbd)
        await state.set_state(Registration.choosing_group)
        return

    # 3) –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:
    if db_user.get("approved"):
        role = db_user.get("role", "student")
        name = db_user.get("first_name", first_name_tg)
        if is_admin:
            await message.answer(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {html.bold(name)}! üëë (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)",
                reply_markup=get_admin_main_keyboard(),
                parse_mode=ParseMode.HTML,
            )
        elif role == "student":
            group = db_user.get("group_name")
            greet = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {html.bold(name)}! üéì"
            if group:
                greet += f"\n–ì—Ä—É–ø–ø–∞: {html.bold(html.quote(group))}"
            await message.answer(greet, reply_markup=get_student_main_keyboard(), parse_mode=ParseMode.HTML)
        elif role == "teacher":
            await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {html.bold(name)}! üßë‚Äçüè´", reply_markup=ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        else:
            await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à —Å—Ç–∞—Ç—É—Å: {role}.", reply_markup=ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
    else:
        # –í–ê–ñ–ù–û: —Å—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —é–∑–µ—Ä —É–∂–µ student –ò –µ—Å—Ç—å —Ä–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞ (—Ç.–µ. —Ä–µ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
        await message.answer(
            "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            parse_mode=ParseMode.HTML,
            reply_markup=ReplyKeyboardRemove(),
        )


@main_router.my_chat_member()
async def on_my_chat_member(update: ChatMemberUpdated, bot: Bot):
    user = update.from_user
    if not user:
        return
    is_admin = user.id in ADMIN_IDS
    await apply_menu_button(bot, user.id, is_admin)


@main_router.message(Command("menu"))
@main_router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def show_menu(message: Message, user_role: Optional[str] = None, user_info: Optional[dict] = None):
    is_admin = message.from_user.id in ADMIN_IDS
    role = (user_role or "pending").lower()
    kbd = None

    # –î–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äî –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–æ–∂–∏–¥–∞–Ω–∏–µ¬ª, –∞ –ø—Ä–æ—Å–∏–º –∑–∞–ø—É—Å—Ç–∏—Ç—å /start
    if role in {"pending", "registering"}:
        await message.answer(
            "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–ù–∞–∂–º–∏—Ç–µ /start –∏ —É–∫–∞–∂–∏—Ç–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.",
            reply_markup=ReplyKeyboardRemove()
        )
        return

    if is_admin:
        kbd = get_admin_main_keyboard()
        text = "üëë –ê–¥–º–∏–Ω-–º–µ–Ω—é:"
        if user_info and user_info.get("group_name") and user_info.get("role") == "student":
            text += f"\n(–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞: {html.bold(html.quote(user_info['group_name']))})"
        await message.answer(text, reply_markup=kbd, parse_mode=ParseMode.HTML)
        return

    if role == "student":
        kbd = get_student_main_keyboard()
        text = "üéì –ú–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞:"
        if user_info and user_info.get("group_name"):
            text += f"\n–ì—Ä—É–ø–ø–∞: {html.bold(html.quote(user_info['group_name']))}"
        elif user_info:
            text += "\n–ì—Ä—É–ø–ø–∞: –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
        await message.answer(text, reply_markup=kbd, parse_mode=ParseMode.HTML)
        return

    if role == "teacher":
        await message.answer("üßë‚Äçüè´ –ú–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=ReplyKeyboardRemove())
        return

    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ —Å—é–¥–∞ –ø–æ–ø–∞–ª–∏, –∑–Ω–∞—á–∏—Ç —é–∑–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∂–¥—ë—Ç, –Ω–æ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.
    await message.answer("‚è≥ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")


@main_router.callback_query(F.data == "open_menu")
async def open_menu_cb(query: CallbackQuery, user_role: Optional[str] = None, user_info: Optional[dict] = None):
    if query.message:
        await show_menu(query.message, user_role=user_role, user_info=user_info)
    with suppress(Exception):
        await query.answer()

# -------------------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è --------------------
@registration_router.message(Registration.getting_first_name, F.text)
async def reg_getting_first_name(message: Message, state: FSMContext):
    first_name = message.text.strip()
    if not first_name or len(first_name) > 100:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è. –í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):")
        return
    await state.update_data(first_name=first_name)
    await message.answer("üëç –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>–§–∞–º–∏–ª–∏—é</b>:", parse_mode=ParseMode.HTML)
    await state.set_state(Registration.getting_last_name)


@registration_router.message(Registration.getting_last_name, F.text)
async def reg_getting_last_name(message: Message, state: FSMContext, db_pool: asyncpg.Pool):
    last_name = message.text.strip()
    if not last_name or len(last_name) > 100:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è. –í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â—É—é —Ñ–∞–º–∏–ª–∏—é (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):")
        return
    await state.update_data(last_name=last_name)

    kbd = await get_groups_keyboard(db_pool, "register")
    if not kbd or not getattr(kbd, "inline_keyboard", None):
        await message.answer("‚ùóÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await state.clear()
        return

    await message.answer("üè´ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=kbd)
    await state.set_state(Registration.choosing_group)


@registration_router.callback_query(Registration.choosing_group, F.data.startswith("register_to_group_"))
async def reg_choosing_group_callback(query: CallbackQuery, state: FSMContext, db_pool: asyncpg.Pool):
    try:
        group_id = int(query.data.split("_")[-1])
    except (ValueError, IndexError):
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /start –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    data = await state.get_data()
    first_name = (data.get("first_name") or query.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å").strip()
    last_name = (data.get("last_name") or query.from_user.last_name or "").strip()
    user = query.from_user

    try:
        async with db_pool.acquire() as conn:
            db_user = await api.get_user(conn, user.id)

            if not db_user:
                # –ü–æ–ª–Ω—ã–π –Ω–æ–≤—ã–π
                user_data = {
                    "telegram_id": user.id,
                    "username": user.username,
                    "first_name": first_name,
                    "last_name": last_name,
                }
                new_user = await api.add_user(conn, user_data)
                user_db_id = new_user["user_id"]
                await api.set_user_role(conn, user_db_id, "student")
                await api.add_student(conn, user_db_id, group_id)
                await api.set_student_group(conn, user_db_id, group_id)
            else:
                user_db_id = db_user["user_id"]
                # –û–±–Ω–æ–≤–∏–º –∏–º—è/—Ñ–∞–º–∏–ª–∏—é –µ—Å–ª–∏ –ø—É—Å—Ç—ã–µ
                try:
                    if not db_user.get("first_name") or not db_user.get("last_name"):
                        await conn.execute(
                            "UPDATE users SET first_name=$1, last_name=$2 WHERE user_id=$3",
                            first_name, last_name, user_db_id
                        )
                except Exception as e:
                    logger.debug(f"Skip update names: {e}")

                # –†–æ–ª—å student
                try:
                    await api.set_user_role(conn, user_db_id, "student")
                except Exception:
                    pass

                # students + –≥—Ä—É–ø–ø–∞
                try:
                    await api.add_student(conn, user_db_id, group_id)
                except Exception:
                    pass
                try:
                    await api.set_student_group(conn, user_db_id, group_id)
                except Exception as e:
                    logger.warning(f"set_student_group failed for {user_db_id}: {e}")

        await query.message.edit_text(
            "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            "‚è≥ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. "
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ–Ω–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞.",
            parse_mode=ParseMode.HTML,
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è {user.id}: {e}", exc_info=True)
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –ø–æ–∑–∂–µ.", show_alert=True)
    finally:
        await state.clear()
        with suppress(Exception):
            await query.answer()

# -------------------- –ü—Ä–æ—Ñ–∏–ª—å: –º–µ–Ω—é –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ --------------------
@profile_router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
@profile_router.message(Command("profile"))
async def open_profile(message: Message, user_role: str, user_info: dict, db_pool: asyncpg.Pool):
    if user_role == "student" or message.from_user.id in ADMIN_IDS:
        await send_profile_card(message.chat.id, message.bot, user_info, db_pool)
        await message.answer("–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è:", reply_markup=get_profile_menu_keyboard())
    else:
        await send_profile_card(message.chat.id, message.bot, user_info, db_pool)


@profile_router.message(F.text == "üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")
async def profile_change_group_start(message: Message, state: FSMContext, user_role: str, user_info: dict, db_pool: asyncpg.Pool):
    if user_role == "student":
        await change_group_start_from_profile_message(message, state, user_info, db_pool)
    else:
        await message.reply("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º.")


@profile_router.message(F.text == "üë§ –°–º–µ–Ω–∏—Ç—å –∏–º—è")
async def profile_change_name_start(message: Message, state: FSMContext, user_role: str, user_info: dict, db_pool: asyncpg.Pool):
    if user_role == "student":
        await change_name_start_from_profile_message(message, state, user_info, db_pool)
    else:
        await message.reply("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º.")


async def send_profile_card(chat_id: int, bot: Bot, user_info: dict, db_pool: asyncpg.Pool):
    fresh_user_info = user_info
    try:
        async with db_pool.acquire() as conn:
            tid = user_info.get("telegram_id")
            if tid:
                fresh = await api.get_user(conn, tid)
                if fresh:
                    fresh_user_info = fresh
    except Exception as e:
        logger.warning(f"Failed to refresh profile for {chat_id}: {e}")

    fn = fresh_user_info.get("first_name") or "‚Äî"
    ln = fresh_user_info.get("last_name") or "‚Äî"
    group_name = fresh_user_info.get("group_name") or "‚Äî"
    role = fresh_user_info.get("role") or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    approved = "‚úÖ –î–∞" if fresh_user_info.get("approved") else "‚ùå –ù–µ—Ç"
    pending_group_name = fresh_user_info.get("pending_group_name")
    pending_fn = fresh_user_info.get("pending_first_name")
    pending_ln = fresh_user_info.get("pending_last_name")

    text = (
        "üë§ <b>–í–∞—à –ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"–ò–º—è: <b>{html.quote(fn)}</b>\n"
        f"–§–∞–º–∏–ª–∏—è: <b>{html.quote(ln)}</b>\n"
        f"–†–æ–ª—å: {html.quote(role.capitalize())}\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: {approved}\n"
    )
    if fresh_user_info.get("role") == "student":
        text += f"–ì—Ä—É–ø–ø–∞: <b>{html.quote(group_name)}</b>\n"

    if pending_group_name:
        text += f"\n‚è≥ <i>–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –≥—Ä—É–ø–ø—ã ‚Üí {html.quote(pending_group_name)}</i>\n"
    if pending_fn:
        text += f"\n‚è≥ <i>–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –∏–º–µ–Ω–∏ ‚Üí {html.quote(pending_fn)} {html.quote(pending_ln or '')}</i>\n"

    await bot.send_message(chat_id, text, parse_mode=ParseMode.HTML)


# -------- Helpers: assignments list for student --------
async def get_assignments_for_student_keyboard(
    db_pool: asyncpg.Pool, user_info: dict
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    group_id = user_info.get("group_id")
    assignments = []
    if group_id:
        try:
            async with db_pool.acquire() as conn:
                assignments = await api.get_assignments_for_group(conn, group_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}: {e}")

    if assignments:
        for a in assignments:
            status_icon = "üÜï" if a.get("accepting_submissions", True) else "üîí"
            button_text = f'{status_icon} {a["title"]}'
            builder.button(text=button_text, callback_data=f"view_assignment_{a['assignment_id']}")
        builder.adjust(1)
    return builder.as_markup()


# -------------------- Student: Submit assignment --------------------
@student_router.message(F.text == "üìù –°–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
@student_router.message(Command("submit"))
async def submit_assignment_list(
    message: Message, user_role: str, user_info: dict, db_pool: asyncpg.Pool
):
    is_admin = message.from_user.id in ADMIN_IDS
    if user_role != "student" and not is_admin:
        await message.reply("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º.")
        return

    group_id = user_info.get("group_id")
    if not group_id:
        if user_info.get("pending_group_id"):
            await message.answer("‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –≥—Ä—É–ø–ø—ã –µ—â—ë –Ω–µ –æ–¥–æ–±—Ä–µ–Ω.")
        else:
            await message.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ. –°–º–µ–Ω–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É.")
        return

    kbd = await get_assignments_for_student_keyboard(db_pool, user_info)
    if kbd and getattr(kbd, "inline_keyboard", None):
        await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Å–¥–∞—á–∏:", reply_markup=kbd)
    else:
        await message.answer("‚ÑπÔ∏è –î–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")


@student_router.callback_query(F.data.startswith("view_assignment_"))
async def student_view_assignment(
    query: CallbackQuery, state: FSMContext, db_pool: asyncpg.Pool, user_role: str, user_info: dict
):
    is_admin = query.from_user.id in ADMIN_IDS
    try:
        assignment_id = int(query.data.split("_")[-1])
    except (ValueError, IndexError):
        await query.answer("–û—à–∏–±–∫–∞ ID –∑–∞–¥–∞–Ω–∏—è", show_alert=True)
        return

    try:
        async with db_pool.acquire() as conn:
            a = await api.get_assignment(conn, assignment_id)
        if not a:
            await query.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        text = f"üìù <b>{html.quote(a['title'])}</b>\n\n"
        if a.get("description"):
            text += f"{html.quote(a['description'])}\n\n"
        deadline_text = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        due_date = a.get("due_date")
        is_past_due = False
        if due_date:
            try:
                due_date_dt = datetime.fromisoformat(str(due_date)) if isinstance(due_date, str) else due_date
                deadline_text = due_date_dt.strftime("%d.%m.%Y %H:%M")
                now = datetime.now(due_date_dt.tzinfo)
                if now > due_date_dt:
                    is_past_due = True
                    deadline_text += " (–ü—Ä–æ—à–ª–æ)"
            except Exception as e:
                logger.warning(f"Error formatting due date {due_date}: {e}")
                deadline_text = str(due_date)
        text += f"üïí –°—Ä–æ–∫ —Å–¥–∞—á–∏: <b>{deadline_text}</b>\n"

        accepting = a.get("accepting_submissions", True)
        status_text = "<b>–û—Ç–∫—Ä—ã—Ç ‚úÖ</b>" if accepting else ("<b>–ó–∞–∫—Ä—ã—Ç (—Å—Ä–æ–∫ –∏—Å—Ç–µ–∫) ‚ùå</b>" if is_past_due else "<b>–ó–∞–∫—Ä—ã—Ç (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º) ‚ùå</b>")
        text += f"üì¨ –ü—Ä–∏–µ–º —Ä–∞–±–æ—Ç: {status_text}\n"

        submission_info = ""
        user_db_id = user_info.get("user_id")
        if user_role == "student" and user_db_id:
            try:
                async with db_pool.acquire() as conn:
                    sub = await conn.fetchrow(
                        "SELECT submission_date, is_late, grade FROM submissions WHERE assignment_id=$1 AND student_id=$2",
                        assignment_id, user_db_id
                    )
                    if sub:
                        sub_time = sub['submission_date'].strftime("%d.%m.%Y %H:%M")
                        late_mark = " (—Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º)" if sub['is_late'] else ""
                        grade_mark = f", –û—Ü–µ–Ω–∫–∞: {sub['grade']}/20" if sub['grade'] is not None else ", –µ—â—ë –Ω–µ –æ—Ü–µ–Ω–µ–Ω–æ"
                        submission_info = f"\n\n‚úÖ <b>–í—ã —Å–¥–∞–ª–∏ {sub_time}{late_mark}{grade_mark}.</b> –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–¥–∞—Ç—å."
            except Exception as e:
                logger.error(f"Error checking submission status: {e}")
        text += submission_info

        builder = InlineKeyboardBuilder()
        if accepting and (user_role == "student" or is_admin):
            button_text = "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ" if not submission_info else "üîÑ –ü–µ—Ä–µ—Å–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É"
            builder.button(text=button_text, callback_data=f"submit_now_{assignment_id}")
        builder.adjust(1)

        if query.message:
            await query.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=builder.as_markup())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞–Ω–∏—è {assignment_id}: {e}", exc_info=True)
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏—è", show_alert=True)
    finally:
        with suppress(Exception):
            await query.answer()


@student_router.callback_query(F.data.startswith("submit_now_"))
async def student_submit_now_start(
    query: CallbackQuery, state: FSMContext, db_pool: asyncpg.Pool, user_role: str
):
    is_admin = query.from_user.id in ADMIN_IDS
    if user_role != "student" and not is_admin:
        await query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        assignment_id = int(query.data.split("_")[-1])
    except (ValueError, IndexError):
        await query.answer("–û—à–∏–±–∫–∞ ID –∑–∞–¥–∞–Ω–∏—è", show_alert=True)
        return

    try:
        async with db_pool.acquire() as conn:
            a = await api.get_assignment(conn, assignment_id)
        if not a:
            await query.answer("‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", show_alert=True)
            if query.message:
                await query.message.edit_reply_markup(reply_markup=None)
            return
        if not a.get("accepting_submissions", True):
            await query.answer("‚ö†Ô∏è –ü—Ä–∏—ë–º —Ä–∞–±–æ—Ç –∑–∞–∫—Ä—ã—Ç.", show_alert=True)
            if query.message:
                await query.message.edit_reply_markup(reply_markup=None)
            return
        title = a.get("title", f"–ó–∞–¥–∞–Ω–∏–µ #{assignment_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è {assignment_id}: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞–Ω–∏–∏.", show_alert=True)
        return

    await state.update_data(assignment_id=assignment_id, assignment_title=title)
    await state.set_state(StudentActions.submitting_assignment_file)

    if query.message:
        await query.message.edit_text(
            f"üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç</b> —Å —Ä–µ—à–µ–Ω–∏–µ–º.\n"
            f"–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: <b>{', '.join('.' + ext for ext in ALLOWED_DOC_EXTS)}</b>.\n\n"
            f"üìù –ó–∞–¥–∞–Ω–∏–µ: <b>{html.quote(title)}</b>\n\n"
            f"<i>(–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel)</i>",
            parse_mode=ParseMode.HTML,
            reply_markup=None
        )
    with suppress(Exception):
        await query.answer()


@student_router.message(Command("cancel"), StudentActions.submitting_assignment_file)
async def cancel_submission(message: Message, state: FSMContext, user_role: str):
    await state.clear()
    is_admin = message.from_user.id in ADMIN_IDS
    kbd = get_admin_main_keyboard() if is_admin else get_student_main_keyboard()
    await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=kbd)


@student_router.message(
    StudentActions.submitting_assignment_file,
    F.content_type.in_({ContentType.DOCUMENT})
)
async def student_submit_assignment_file(
    message: Message,
    state: FSMContext,
    bot: Bot,
    user_db_id: int,
    user_info: dict,
    db_pool: asyncpg.Pool,
):
    data = await state.get_data()
    assignment_id = data.get("assignment_id")
    assignment_title = data.get("assignment_title", "?")
    is_admin = message.from_user.id in ADMIN_IDS
    submitter_db_id = user_db_id
    if not submitter_db_id:
        logger.error(f"Submission attempt without db_id: TG_ID={message.from_user.id}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        await state.clear()
        return

    kbd = get_admin_main_keyboard() if is_admin else get_student_main_keyboard()

    if not assignment_id:
        await state.clear()
        await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM. –ù–∞—á–Ω–∏—Ç–µ —Å–¥–∞—á—É –∑–∞–Ω–æ–≤–æ.", reply_markup=kbd)
        return

    if not message.document:
        await message.reply(
            f"‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–¥–æ–∫—É–º–µ–Ω—Ç</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>{', '.join('.' + ext for ext in ALLOWED_DOC_EXTS)}</b>.",
            parse_mode=ParseMode.HTML,
        )
        return

    file_name = (message.document.file_name or "file").lower()
    ext = file_name.rsplit(".", 1)[-1] if "." in file_name else ""
    if ext not in ALLOWED_DOC_EXTS:
        await message.reply(
            f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç (.{ext}). –†–∞–∑—Ä–µ—à–µ–Ω—ã: <b>{', '.join('.' + ext for ext in ALLOWED_DOC_EXTS)}</b>.",
            parse_mode=ParseMode.HTML,
        )
        return

    file_id = message.document.file_id

    try:
        async with db_pool.acquire() as conn:
            sub_res = await api.add_submission(conn, assignment_id, submitter_db_id, file_id)
            if not sub_res:
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏—ë–º —Ä–∞–±–æ—Ç –∑–∞–∫—Ä—ã—Ç.", reply_markup=kbd)
                await state.clear()
                return

        await message.answer("‚úÖ –†–µ—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=kbd)
        await state.clear()

        try:
            teachers_db_ids = await api.get_teachers_ids(db_pool)
            all_notify_ids = set(teachers_db_ids) | ADMIN_IDS

            submitter_name = f"{user_info.get('first_name', '')} {user_info.get('last_name', '')}".strip() or f"ID: {submitter_db_id}"
            submitter_group = user_info.get("group_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

            sub_time = sub_res.get("submission_date")
            sub_time_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if sub_time:
                sub_time_dt = datetime.fromisoformat(str(sub_time)) if isinstance(sub_time, str) else sub_time
                sub_time_str = sub_time_dt.strftime('%d.%m.%Y %H:%M:%S')

            late_mark = " ‚ö†Ô∏è <b>–û–ü–û–ó–î–ê–ù–ò–ï</b>" if sub_res.get("is_late") else ""
            submission_id = sub_res.get("submission_id", "???")

            caption = (
                f"üì• <b>–ù–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞!</b>{late_mark}\n\n"
                f"üë§ –û—Ç: <b>{html.quote(submitter_name)}</b> (ID: {submitter_db_id})\n"
                f"üìö –ì—Ä—É–ø–ø–∞: <b>{html.quote(submitter_group)}</b>\n"
                f"üìù –ó–∞–¥–∞–Ω–∏–µ: <b>{html.quote(assignment_title)}</b> (ID: {assignment_id})\n"
                f"üïê –í—Ä–µ–º—è: {sub_time_str}\n"
                f"üÜî ID —Å–¥–∞—á–∏: <code>{submission_id}</code>"
            )

            sent_to = set()
            for tid in all_notify_ids:
                if tid == message.from_user.id or tid in sent_to:
                    continue
                try:
                    await bot.send_document(chat_id=tid, document=file_id, caption=caption, parse_mode=ParseMode.HTML)
                    sent_to.add(tid)
                    await asyncio.sleep(0.05)
                except TelegramAPIError as e:
                    logger.error(f"Notify {tid} about submission {submission_id} fail: {e}")
        except Exception as e:
            logger.error(f"Error during notify phase: {e}", exc_info=True)

    except asyncpg.exceptions.RaiseError as db_error:
        logger.error(f"DB raise error during submission a={assignment_id} s={submitter_db_id}: {db_error}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_error.message}", reply_markup=kbd)
        await state.clear()
    except Exception as e:
        logger.error(f"Submit err a={assignment_id} s={submitter_db_id}: {e}", exc_info=True)
        if "closed" in str(e).lower():
            await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –ü—Ä–∏—ë–º —Ä–∞–±–æ—Ç –∑–∞–∫—Ä—ã—Ç.", reply_markup=kbd)
        else:
            await message.reply("‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=kbd)
        await state.clear()


@student_router.message(StudentActions.submitting_assignment_file)
async def student_submit_assignment_incorrect_type(message: Message):
    await message.reply(
        f"‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–∞–π–ª-–¥–æ–∫—É–º–µ–Ω—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤: <b>{', '.join('.' + ext for ext in ALLOWED_DOC_EXTS)}</b> –∏–ª–∏ /cancel.",
        parse_mode=ParseMode.HTML
    )


# -------------------- Student: Q&A --------------------
@student_router.message(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å (Q&A)")
@student_router.message(Command("ask"))
async def ask_question_start(message: Message, state: FSMContext, user_role: str):
    is_admin = message.from_user.id in ADMIN_IDS
    if user_role == "student" or is_admin:
        await message.answer("‚ùì –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(StudentActions.asking_question)
    else:
        await message.reply("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º.")


@student_router.message(Command("cancel"), StudentActions.asking_question)
async def cancel_question(message: Message, state: FSMContext, user_role: str):
    await state.clear()
    is_admin = message.from_user.id in ADMIN_IDS
    kbd = get_admin_main_keyboard() if is_admin else get_student_main_keyboard()
    await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=kbd)


@student_router.message(StudentActions.asking_question, F.text)
async def process_question(
    message: Message,
    state: FSMContext,
    bot: Bot,
    user_db_id: int,
    user_info: dict,
    db_pool: asyncpg.Pool,
):
    q_text = message.text.strip()
    is_admin = message.from_user.id in ADMIN_IDS
    submitter_db_id = user_db_id
    if not submitter_db_id:
        logger.error(f"Question attempt without db_id: TG_ID={message.from_user.id}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        await state.clear()
        return

    kbd = get_admin_main_keyboard() if is_admin else get_student_main_keyboard()

    if not q_text or len(q_text) < 5:
        await message.reply("‚ùå –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ /cancel.")
        return

    try:
        g_id = user_info.get("group_id")
        async with db_pool.acquire() as conn:
            q_res = await api.add_question(conn, submitter_db_id, g_id, q_text)

        if not q_res or "question_id" not in q_res:
            raise Exception("Failed to add question to DB or missing question_id")

        await message.answer("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.", reply_markup=kbd)
        await state.clear()

        try:
            teachers_db_ids = await api.get_teachers_ids(db_pool)
            all_notify_ids = set(teachers_db_ids) | ADMIN_IDS

            submitter_name = f"{user_info.get('first_name', '')} {user_info.get('last_name', '')}".strip() or f"ID: {submitter_db_id}"
            g_name = user_info.get("group_name", "–ù–µ –≤ –≥—Ä—É–ø–ø–µ")
            q_id = q_res["question_id"]
            notify_text = (
                f"‚ùì <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å</b> (ID: {q_id})\n\n"
                f"üë§ –û—Ç: <b>{html.quote(submitter_name)}</b> (ID: {submitter_db_id})\n"
                f"üìö –ì—Ä—É–ø–ø–∞: <b>{html.quote(g_name)}</b>\n\n"
                f"<i>{html.quote(q_text)}</i>"
            )

            sent_to = set()
            for tid in all_notify_ids:
                if tid == message.from_user.id or tid in sent_to:
                    continue
                try:
                    await bot.send_message(tid, notify_text, parse_mode=ParseMode.HTML)
                    sent_to.add(tid)
                    await asyncio.sleep(0.05)
                except TelegramAPIError as e:
                    logger.error(f"Notify teacher/admin {tid} about question {q_id} fail: {e}")
        except Exception as e:
            logger.error(f"Error during Q&A notification phase: {e}", exc_info=True)

    except Exception as e:
        logger.error(f"Ask Q err user_db_id={submitter_db_id}: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=kbd)
        await state.clear()


# -------------------- Student: Grades --------------------
@student_router.message(F.text == "üìä –ú–æ–∏ –û—Ü–µ–Ω–∫–∏")
async def student_view_my_grades(
    message: Message, user_role: str, user_db_id: int, db_pool: asyncpg.Pool
):
    is_admin = message.from_user.id in ADMIN_IDS
    if user_role != "student" and not is_admin:
        await message.reply("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º.")
        return

    submitter_db_id = user_db_id
    if not submitter_db_id:
        logger.error(f"Grade view attempt without db_id: TG_ID={message.from_user.id}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        return

    try:
        async with db_pool.acquire() as conn:
            grades = await api.get_grades_for_student(conn, submitter_db_id)

        if not grades:
            await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç.")
            return

        response_lines = ["üìä <b>–í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏:</b>\n"]
        for g in grades:
            title = html.quote(g.get('assignment_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ'))
            grade_val = g.get('grade')
            comment = html.quote(g.get('teacher_comment', '')).strip()

            line = f"üìÑ <b>{title}</b>: "
            if grade_val is not None:
                line += f"<b>{grade_val}/20</b>"
                if comment:
                    line += f" ({comment})"
            elif comment:
                line += f"<i>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ</i> ({comment})"
            else:
                line += "<i>–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</i>"
            response_lines.append(line)

        full_response = "\n".join(response_lines)
        MAX_LEN = 4096
        if len(full_response) <= MAX_LEN:
            await message.answer(full_response, parse_mode=ParseMode.HTML)
        else:
            for i in range(0, len(full_response), MAX_LEN):
                await message.answer(full_response[i: i + MAX_LEN], parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ –¥–ª—è user_db_id={submitter_db_id}: {e}", exc_info=True)
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –æ—Ü–µ–Ω–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# -------------------- –ü—Ä–æ—Ñ–∏–ª—å: —Å–º–µ–Ω–∞ –≥—Ä—É–ø–ø—ã/–∏–º–µ–Ω–∏ --------------------
async def change_group_start_from_profile_message(
    message: Message, state: FSMContext, user_info: dict, db_pool: asyncpg.Pool
):
    user_db_id = user_info.get("user_id")
    if not user_db_id:
        await message.reply("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    current_group_id = user_info.get("group_id")
    pending_group_id = user_info.get("pending_group_id")
    pending_group_name = user_info.get("pending_group_name")

    if pending_group_id:
        p_group_name = pending_group_name or f"ID {pending_group_id}"
        await message.answer(
            f"‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –≥—Ä—É–ø–ø—ã –≤ <b>{html.quote(p_group_name)}</b> —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
            parse_mode=ParseMode.HTML
        )
        return

    kbd = await get_groups_keyboard(db_pool, "change")
    valid_rows = []
    if kbd and getattr(kbd, "inline_keyboard", None):
        for row in kbd.inline_keyboard:
            new_row = [b for b in row if not b.callback_data.endswith(f"_{current_group_id}")]
            if new_row:
                valid_rows.append(new_row)

    if not valid_rows:
        await message.answer("‚ÑπÔ∏è –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è —Å–º–µ–Ω—ã.")
        return

    filtered_kbd = InlineKeyboardMarkup(inline_keyboard=valid_rows)
    await message.answer(
        "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ <b>–Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É</b> –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=filtered_kbd,
        parse_mode=ParseMode.HTML,
    )
    await state.set_state(StudentActions.changing_group)


@student_router.callback_query(StudentActions.changing_group, F.data.startswith("change_to_group_"))
async def process_group_change_request(query: CallbackQuery, state: FSMContext, user_db_id: int, db_pool: asyncpg.Pool):
    if not user_db_id:
        logger.error(f"Group change request without db_id: TG_ID={query.from_user.id}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID.", show_alert=True)
        await state.clear()
        return

    try:
        new_group_id = int(query.data.split("_")[-1])
    except (ValueError, IndexError):
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã.")
        await state.clear()
        return

    group_name = f"–≥—Ä—É–ø–ø—É ID {new_group_id}"
    try:
        async with db_pool.acquire() as conn:
            new_group = await api.get_group_by_id(conn, new_group_id)
            if new_group:
                group_name = f"–≥—Ä—É–ø–ø—É ¬´{new_group['name']}¬ª"
            success = await api.request_group_change(conn, user_db_id, new_group_id)
            if success:
                await query.message.edit_text(
                    f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –≤ <b>{html.quote(group_name)}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode=ParseMode.HTML
                )
            else:
                user_check = await api.get_user_by_db_id(conn, user_db_id)
                if user_check and user_check.get("pending_group_id") == new_group_id:
                    await query.message.edit_text(
                        f"‚è≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –≤ <b>{html.quote(group_name)}</b> —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –∂–¥—ë—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è.",
                        parse_mode=ParseMode.HTML
                    )
                elif user_check and user_check.get("pending_group_id"):
                    await query.message.edit_text(
                        f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –≥—Ä—É–ø–ø—ã. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.",
                        parse_mode=ParseMode.HTML
                    )
                else:
                    await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except asyncpg.exceptions.ForeignKeyViolationError:
        await query.message.edit_text("‚ùå –í—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"Group change req err user_db_id={user_db_id}, group={new_group_id}: {e}", exc_info=True)
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    finally:
        await state.clear()
        with suppress(Exception):
            await query.answer()


async def change_name_start_from_profile_message(message: Message, state: FSMContext, user_info: dict, db_pool: asyncpg.Pool):
    user_db_id = user_info.get("user_id")
    if not user_db_id:
        await message.reply("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    pending_first = user_info.get("pending_first_name")
    pending_last = user_info.get("pending_last_name")
    try:
        async with db_pool.acquire() as conn:
            u = await api.get_user_by_db_id(conn, user_db_id)
            if u:
                pending_first = u.get("pending_first_name")
                pending_last = u.get("pending_last_name")
    except Exception as e:
        logger.warning(f"Failed to refresh pending name status for {user_db_id}: {e}")

    if pending_first:
        await message.answer(
            f"‚è≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –∏–º–µ–Ω–∏ –Ω–∞ <b>{html.quote(pending_first)} {html.quote(pending_last or '')}</b> —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
            parse_mode=ParseMode.HTML
        )
        return

    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤–æ–µ –ò–º—è</b>:", reply_markup=ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
    await state.set_state(StudentActions.changing_name_first)


@student_router.message(Command("cancel"), StateFilter(StudentActions.changing_name_first, StudentActions.changing_name_last))
async def cancel_name_change(message: Message, state: FSMContext, user_role: str):
    await state.clear()
    is_admin = message.from_user.id in ADMIN_IDS
    kbd = get_admin_main_keyboard() if is_admin else get_student_main_keyboard()
    await message.answer("–°–º–µ–Ω–∞ –∏–º–µ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=kbd)


@student_router.message(StudentActions.changing_name_first, F.text)
async def process_change_name_first(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name or len(name) > 100:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel:")
        return
    await state.update_data(new_first_name=name)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤—É—é –§–∞–º–∏–ª–∏—é</b>:", parse_mode=ParseMode.HTML)
    await state.set_state(StudentActions.changing_name_last)


@student_router.message(StudentActions.changing_name_last, F.text)
async def process_change_name_last(message: Message, state: FSMContext, user_db_id: int, db_pool: asyncpg.Pool):
    if not user_db_id:
        logger.error(f"Name change request without db_id: TG_ID={message.from_user.id}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID.")
        await state.clear()
        return

    last_name = message.text.strip()
    if not last_name or len(last_name) > 100:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel:")
        return

    data = await state.get_data()
    first_name = data.get("new_first_name")
    if not first_name:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start.")
        await state.clear()
        return

    is_admin = message.from_user.id in ADMIN_IDS
    kbd = get_admin_main_keyboard() if is_admin else get_student_main_keyboard()

    try:
        async with db_pool.acquire() as conn:
            success = await api.request_name_change(conn, user_db_id, first_name, last_name)
        if success:
            await message.answer(
                f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –∏–º–µ–Ω–∏ –Ω–∞ <b>{html.quote(first_name)} {html.quote(last_name)}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=kbd,
                parse_mode=ParseMode.HTML,
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å.", reply_markup=kbd)
    except Exception as e:
        logger.error(f"Name change err user_db_id={user_db_id}: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", reply_markup=kbd)
    finally:
        await state.clear()


# -------------------- –ú–∞—Ç–µ—Ä–∏–∞–ª—ã --------------------
@materials_router.message(F.text == "üìÅ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def open_materials_menu(message: Message, user_role: str):
    if user_role == "student" or message.from_user.id in ADMIN_IDS:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:", reply_markup=get_materials_menu_keyboard())


@materials_router.message(F.text.in_({"üìò –õ–µ–∫—Ü–∏–∏", "üì£ –û–±—ä—è–≤–ª–µ–Ω–∏—è", "üìä –ì—Ä–∞—Ñ–∏–∫–∏/–†–∏—Å—É–Ω–∫–∏", "üé¨ –í–∏–¥–µ–æ", "üîó –°—Å—ã–ª–∫–∏", "üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞"}))
async def show_materials_by_category(message: Message):
    title_to_key = {v: k for k, v in MATERIAL_CATEGORIES.items()}
    category_key = title_to_key.get(message.text)
    if not category_key:
        await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.")
        return

    user_id = message.from_user.id
    category_storage = LAST_MATERIALS_BY_CAT.get(user_id, {})
    items = category_storage.get(category_key, [])
    category_name = MATERIAL_CATEGORIES.get(category_key, "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã")

    if not items:
        await message.answer(f"‚ÑπÔ∏è –í —Ä–∞–∑–¥–µ–ª–µ ¬´{category_name}¬ª –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
        return

    text = f"üÜï <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Äî {category_name}</b> (–¥–æ {MAX_LAST_MATERIALS} —à—Ç.):\n\n"
    text += "\n".join(f"‚Ä¢ {html.quote(summary)}" for summary in items)
    text += "\n\nüìå –ù–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ–±—ã—á–Ω–æ –∑–∞–∫—Ä–µ–ø–ª—è—é—Ç—Å—è –≤–≤–µ—Ä—Ö—É —á–∞—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞."
    await message.answer(text, parse_mode=ParseMode.HTML)


# -------------------- –û—á–µ—Ä–µ–¥—å –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç backend --------------------
def _fmt_grade_message(title: str, grade: Optional[int], comment: Optional[str]) -> str:
    txt = f"‚úÖ <b>–û—Ü–µ–Ω–∫–∞ –∑–∞ ¬´{html.quote(title or '–ó–∞–¥–∞–Ω–∏–µ')}¬ª</b>\n\n"
    grade_str = f"<b>{grade}/20</b>" if grade is not None else "<i>–ë–µ–∑ –æ—Ü–µ–Ω–∫–∏</i>"
    comment_str = f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {html.quote(comment)}" if comment else ""
    txt += grade_str + comment_str
    if grade is None and not comment:
        txt += "–°—Ç–∞—Ç—É—Å: <b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ</b>"
    return txt


def _remember_material(telegram_id: int, summary: str):
    arr = LAST_MATERIALS.setdefault(telegram_id, [])
    if not arr or arr[-1] != summary:
        arr.append(summary)
    if len(arr) > MAX_LAST_MATERIALS:
        del arr[0: len(arr) - MAX_LAST_MATERIALS]


def _remember_material_by_cat(telegram_id: int, category: str, summary: str):
    cat_map = LAST_MATERIALS_BY_CAT.setdefault(telegram_id, {})
    arr = cat_map.setdefault(category, [])
    if not arr or arr[-1] != summary:
        arr.append(summary)
    if len(arr) > MAX_LAST_MATERIALS:
        del arr[0: len(arr) - MAX_LAST_MATERIALS]


async def _send_and_pin(
    bot: Bot,
    chat_id: int,
    text: Optional[str] = None,
    file_id: Optional[str] = None,
    file_type: Optional[str] = None,
    parse_mode: Optional[ParseMode] = ParseMode.HTML,
    disable_notification: bool = False,
    pin_message: bool = True
) -> Optional[int]:
    sent_message: Optional[Message] = None
    try:
        if file_id and file_id.startswith("local:"):
            logger.warning(f"Cannot send local file {file_id}. Sending text only for chat {chat_id}.")
            file_id = None

        MAX_CAPTION = 1024
        caption = text or ""
        if len(caption) > MAX_CAPTION:
            caption = caption[:MAX_CAPTION - 3] + "..."
            logger.warning(f"Caption truncated for chat {chat_id}, file {file_id}")

        if file_id:
            effective_type = file_type or "document"
            try:
                if effective_type == "photo":
                    sent_message = await bot.send_photo(chat_id, file_id, caption=caption, parse_mode=parse_mode)
                elif effective_type == "video":
                    sent_message = await bot.send_video(chat_id, file_id, caption=caption, parse_mode=parse_mode)
                else:
                    sent_message = await bot.send_document(chat_id, file_id, caption=caption, parse_mode=parse_mode)
            except TelegramAPIError as send_error:
                logger.error(f"Failed to send file {file_id} ({effective_type}) to {chat_id}: {send_error}")
                if text:
                    logger.info(f"Falling back to sending text only to {chat_id}")
                else:
                    return None

        if text and not sent_message:
            MAX_TEXT = 4096
            if len(text) <= MAX_TEXT:
                try:
                    sent_message = await bot.send_message(chat_id, text, parse_mode=parse_mode)
                except TelegramAPIError as text_error:
                    logger.error(f"Failed to send text message to {chat_id}: {text_error}")
                    return None
            else:
                pin_message = False
                try:
                    for i in range(0, len(text), MAX_TEXT):
                        await bot.send_message(chat_id, text[i: i + MAX_TEXT], parse_mode=parse_mode)
                        await asyncio.sleep(0.1)
                    return None
                except TelegramAPIError as chunk_error:
                    logger.error(f"Failed to send text chunk to {chat_id}: {chunk_error}")
                    return None

        if sent_message and pin_message:
            try:
                await bot.pin_chat_message(chat_id, sent_message.message_id, disable_notification=disable_notification)
            except TelegramAPIError as pin_error:
                logger.warning(f"Failed to pin message {sent_message.message_id} in chat {chat_id}: {pin_error}")

        return sent_message.message_id if sent_message else None

    except Exception as e:
        logger.error(f"Unexpected error in _send_and_pin for {chat_id}: {e}", exc_info=True)
        return None


async def process_assignment_queue(bot: Bot, db_pool: asyncpg.Pool):
    queue_file = "/tmp/bot_queue.json"
    while True:
        await asyncio.sleep(2)
        current_queue = []
        if os.path.exists(queue_file):
            try:
                with open(queue_file, "r+", encoding="utf-8") as f:
                    try:
                        content = f.read()
                        if content:
                            current_queue = json.loads(content)
                        else:
                            current_queue = []
                        f.seek(0)
                        f.truncate()
                        if not isinstance(current_queue, list):
                            current_queue = []
                    except json.JSONDecodeError:
                        logger.error(f"Error decoding JSON from {queue_file}. File cleared.")
                        f.seek(0)
                        f.truncate()
                        current_queue = []
                    except Exception as read_err:
                        logger.error(f"Error reading/clearing queue file {queue_file}: {read_err}")
                        current_queue = []
            except Exception as outer_err:
                logger.error(f"Unexpected error accessing queue file {queue_file}: {outer_err}")
                current_queue = []

        if not current_queue:
            continue
        logger.info(f"Processing {len(current_queue)} actions from queue...")

        for item in current_queue:
            action_id = item.get("timestamp", str(uuid.uuid4()))
            action = item.get("action")
            data = item.get("data") or {}
            try:
                if action == "send_assignment_to_group":
                    gid, aid, title = data.get("group_id"), data.get("assignment_id"), data.get("title", "–ó–∞–¥–∞–Ω–∏–µ")
                    if not gid or not aid:
                        logger.warning(f"Skipping {action}: missing gid/aid")
                        continue
                    async with db_pool.acquire() as conn:
                        students = await api.get_users(conn, role="student", group_id=gid, approved=True)
                    if not students:
                        logger.warning(f"No students for {action} {aid} in group {gid}")
                        continue
                    text = f"üîî <b>–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {html.quote(title)}</b>\nüìå ID –ó–∞–¥–∞–Ω–∏—è: {aid}\n\n..."
                    sent_count = 0
                    for st in students:
                        tid = st.get("telegram_id")
                        if tid:
                            mid = await _send_and_pin(bot, tid, text=text, file_id=data.get("file_id"), file_type=data.get("file_type"), pin_message=True)
                            if mid:
                                sent_count += 1
                            await asyncio.sleep(0.04)
                    logger.info(f"Sent {action} {aid} to {sent_count}/{len(students)} students in group {gid}.")

                elif action == "send_material_to_group":
                    gid, cat, title = data.get("group_id"), data.get("category", "other"), data.get("title", "–ú–∞—Ç–µ—Ä–∏–∞–ª")
                    if not gid:
                        logger.warning(f"Skipping {action}: missing gid")
                        continue
                    async with db_pool.acquire() as conn:
                        students = await api.get_users(conn, role="student", group_id=gid, approved=True)
                    if not students:
                        logger.warning(f"No students for {action} '{title}' in group {gid}")
                        continue
                    body = f"üÜï <b>{html.quote(MATERIAL_CATEGORIES.get(cat, cat.capitalize()))}: {html.quote(title)}</b>\n\n..."
                    files = data.get("files", [])
                    fid, ftype = (files[0]['file_id'], files[0].get('file_type')) if files else (None, None)
                    sent_count = 0
                    for st in students:
                        tid = st.get("telegram_id")
                        if tid:
                            mid = await _send_and_pin(bot, tid, text=body, file_id=fid, file_type=ftype, pin_message=data.get("pin", True))
                            if mid:
                                sent_count += 1
                            await asyncio.sleep(0.04)
                    logger.info(f"Sent {action} '{title}' to {sent_count}/{len(students)} students in group {gid}.")

                elif action == "send_grade_to_student":
                    st_tid = data.get("student_telegram_id")
                    if st_tid:
                        msg = _fmt_grade_message(data.get("assignment_title", "?"), data.get("grade"), data.get("comment"))
                        try:
                            await bot.send_message(st_tid, msg, parse_mode=ParseMode.HTML)
                            logger.info(f"Sent grade to {st_tid}")
                        except TelegramAPIError as e:
                            logger.error(f"Failed send grade to {st_tid}: {e}")
                    else:
                        logger.warning(f"Skipping {action}: missing student_telegram_id")

                elif action == "resend_submission_to_admin":
                    admin_tid, fid = data.get("admin_telegram_id"), data.get("file_id")
                    if admin_tid and fid:
                        try:
                            await _send_and_pin(bot, admin_tid, text=data.get("caption"), file_id=fid, file_type=data.get("file_type"), pin_message=False)
                            logger.info(f"Resent submission {fid} to admin {admin_tid}")
                        except Exception as e:
                            logger.error(f"Error resending submission to admin {admin_tid}: {e}")
                    else:
                        logger.warning(f"Skipping {action}: missing admin_tid/file_id")

                elif action == "notify_answer":
                    st_tid = data.get("student_telegram_id")
                    if st_tid:
                        msg = f"üí° <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å</b>\n\n<b>–í–æ–ø—Ä–æ—Å:</b> <i>{html.quote(data.get('question_text','?'))}</i>\n\n<b>–û—Ç–≤–µ—Ç:</b> {html.quote(data.get('answer_text','?'))}"
                        try:
                            await bot.send_message(st_tid, msg, parse_mode=ParseMode.HTML)
                            logger.info(f"Sent answer to {st_tid}")
                        except TelegramAPIError as e:
                            logger.error(f"Failed send answer to {st_tid}: {e}")
                    else:
                        logger.warning(f"Skipping {action}: missing student_telegram_id")

                elif action == "notify_user_approval":
                    st_tid = data.get("student_telegram_id")
                    if st_tid:
                        builder = InlineKeyboardBuilder()
                        builder.button(text=data.get("button_text", "–ú–µ–Ω—é"), callback_data="open_menu")
                        markup = builder.as_markup()
                        text = "‚úÖ <b>–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞."
                        try:
                            await bot.send_message(st_tid, text, parse_mode=ParseMode.HTML, reply_markup=markup)
                            logger.info(f"Sent approval to {st_tid}")
                        except TelegramAPIError as e:
                            logger.error(f"Failed send approval to {st_tid}: {e}")
                    else:
                        logger.warning(f"Skipping {action}: missing student_telegram_id")

                else:
                    logger.warning(f"Unknown queue action: '{action}'. Skipping.")

            except Exception as e:
                logger.error(f"Error processing action '{action}' (ID: {action_id}): {e}", exc_info=True)

# -------------------- –ê–¥–º–∏–Ω—Å–∫–∏–µ --------------------
@teacher_router.message(F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_open_webapp(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    if not WEBAPP_URL:
        await message.answer("‚ùå URL –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞.")
        return
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å...", reply_markup=get_admin_main_keyboard())


@teacher_router.message(F.web_app_data)
async def handle_webapp_data(message: Message, bot: Bot):
    if message.from_user.id not in ADMIN_IDS:
        logger.warning(f"Received web_app_data from non-admin {message.from_user.id}. Ignoring.")
        return
    try:
        data_str = message.web_app_data.data
        data = json.loads(data_str)
        action = data.get("action")
        logger.info(f"Received WebApp data from {message.from_user.id}: action={action}")
        if action:
            await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ WebApp (–¥–µ–π—Å—Ç–≤–∏–µ: {action}) –ø–æ–ª—É—á–µ–Ω—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å–µ—Ä–≤–µ—Ä–æ–º.")
        else:
            await message.answer(f"‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp.")
            logger.info(f"Received unknown WebApp data structure: {data_str}")
    except json.JSONDecodeError:
        logger.error(f"WebApp JSON decode error from {message.from_user.id}: {message.web_app_data.data}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp (–Ω–µ–≤–µ—Ä–Ω—ã–π JSON).")
    except Exception as e:
        logger.error(f"WebApp data handling error from {message.from_user.id}: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp.")


# -------------------- –ù–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–∫–Ω–æ–ø–∫–∞) ‚Äî –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ --------------------
@main_router.message(Command("materials"))
async def show_new_materials(message: Message):
    user_id = message.from_user.id
    items = LAST_MATERIALS.get(user_id, [])
    if not items:
        await message.answer(
            "‚ÑπÔ∏è –ù–æ–≤—ã—Ö –æ–±—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é 'üìÅ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."
        )
        return
    text = f"üÜï <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ({len(items)} —à—Ç.)</b>:\n\n"
    text += "\n".join(f"‚Ä¢ {html.quote(summary)}" for summary in items)
    text += "\n\nüìå –ù–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ–±—ã—á–Ω–æ –∑–∞–∫—Ä–µ–ø–ª—è—é—Ç—Å—è –≤–≤–µ—Ä—Ö—É —á–∞—Ç–∞."
    await message.answer(text, parse_mode=ParseMode.HTML)


# -------------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ --------------------
async def main():
    global bot_instance

    if not BOT_TOKEN:
        logger.critical("TELEGRAM_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
        return
    if not DATABASE_URL:
        logger.critical("DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω!")
        return
    if not ADMIN_IDS:
        logger.warning("ADMIN_IDS –Ω–µ —É–∫–∞–∑–∞–Ω—ã!")
    if not WEBAPP_URL:
        logger.warning("WEBAPP_URL –Ω–µ –∑–∞–¥–∞–Ω.")

    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    bot_instance = bot
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

    try:
        pool = await get_db_pool()
        async with pool.acquire() as conn:
            await conn.fetchval("SELECT 1")
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.")
    except Exception as e:
        logger.critical(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: {e}", exc_info=True)
        return

    with suppress(Exception):
        await bot.set_chat_menu_button(menu_button=types.MenuButtonDefault())

    dp.update.outer_middleware(ApprovalMiddleware())

    dp.include_router(registration_router)
    dp.include_router(profile_router)
    dp.include_router(materials_router)
    dp.include_router(teacher_router)
    dp.include_router(student_router)
    dp.include_router(main_router)

    @dp.message()
    async def handle_unknown(message: Message, state: FSMContext, user_role: Optional[str] = None, user_info: Optional[dict] = None):
        current_state = await state.get_state()
        if current_state:
            if current_state.startswith(StudentActions.__name__):
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            elif current_state.startswith(Registration.__name__):
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.")
            else:
                await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –∏–ª–∏ /start.")
            return
        logger.info(f"Unhandled message from {message.from_user.id}: {message.text[:50]}")
        await show_menu(message, user_role=user_role, user_info=user_info)

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    pool = await get_db_pool()
    queue_task = asyncio.create_task(process_assignment_queue(bot, pool))

    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except (KeyboardInterrupt, SystemExit):
        logger.info("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ polling: {e}", exc_info=True)
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
        queue_task.cancel()
        with suppress(asyncio.CancelledError):
            await queue_task
        logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞...")
        if bot and bot.session:
            await bot.session.close()
        logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ –ë–î...")
        global db_pool
        if db_pool:
            await db_pool.close()
            db_pool = None
            logger.info("‚úÖ –ü—É–ª –ë–î –∑–∞–∫—Ä—ã—Ç.")
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (KeyboardInterrupt).")
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ main(): {e}", exc_info=True)
